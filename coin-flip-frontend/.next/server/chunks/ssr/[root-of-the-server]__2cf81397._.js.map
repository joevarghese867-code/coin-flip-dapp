{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/wallet/WalletButton.tsx"],"sourcesContent":["'use client'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\n\nexport function WalletButton() {\n  return (\n    <div className=\"flex justify-end p-4\">\n      <WalletMultiButton className=\"btn-primary\" />\n    </div>\n  )\n}"],"names":[],"mappings":";;;;AACA;AADA;;;AAGO,SAAS;IACd,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,+LAAA,CAAA,oBAAiB;YAAC,WAAU;;;;;;;;;;;AAGnC","debugId":null}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/solana/solana-provider.tsx"],"sourcesContent":["'use client'\nimport { AnchorProvider } from '@coral-xyz/anchor'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { useMemo } from 'react'\n\nexport function useAnchorProvider() {\n  const { connection } = useConnection()\n  const wallet = useWallet()\n\n  return useMemo(() => {\n    return new AnchorProvider(connection, wallet as any, {\n      commitment: 'confirmed',\n    })\n  }, [connection, wallet])\n}"],"names":[],"mappings":";;;AACA;AAAA;AACA;AAAA;AACA;AAHA;;;;AAKO,SAAS;IACd,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,qLAAA,CAAA,gBAAa,AAAD;IACnC,MAAM,SAAS,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD;IAEvB,OAAO,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACb,OAAO,IAAI,mKAAA,CAAA,iBAAc,CAAC,YAAY,QAAe;YACnD,YAAY;QACd;IACF,GAAG;QAAC;QAAY;KAAO;AACzB","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/use-transaction-toast.tsx"],"sourcesContent":["'use client'\nimport { toast } from 'sonner'\n\nexport function useTransactionToast() {\n  return (signature: string) => {\n    toast.success('Transaction sent!', {\n      description: `Signature: ${signature.slice(0, 8)}...`,\n      action: {\n        label: 'View',\n        onClick: () => window.open(`https://explorer.solana.com/tx/${signature}?cluster=localnet`, '_blank')\n      }\n    })\n  }\n}"],"names":[],"mappings":";;;AACA;AADA;;AAGO,SAAS;IACd,OAAO,CAAC;QACN,wIAAA,CAAA,QAAK,CAAC,OAAO,CAAC,qBAAqB;YACjC,aAAa,CAAC,WAAW,EAAE,UAAU,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;YACrD,QAAQ;gBACN,OAAO;gBACP,SAAS,IAAM,OAAO,IAAI,CAAC,CAAC,+BAA+B,EAAE,UAAU,iBAAiB,CAAC,EAAE;YAC7F;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/lib/idl.ts"],"sourcesContent":["// src/lib/idl.ts\n\nexport const IDL = {\n  \"address\": \"\",\n  \"metadata\": {\n    \"name\": \"coin_flip_backend\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"deposit\",\n      \"discriminator\": [\n        242,    \n        35,\n        198,\n        137,\n        82,\n        225,\n        242,\n        182\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"owner\",\n          \"writable\": true,\n          \"signer\": true,\n          \"relations\": [\n            \"game_state\"\n          ]\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [\n        175,\n        175,\n        109,\n        31,\n        13,\n        152,\n        155,\n        237\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"owner\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"fee_percentage\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"place_bet\",\n      \"discriminator\": [\n        222,\n        62,\n        67,\n        220,\n        63,\n        166,\n        126,\n        33\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"user\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"owner\",\n          \"relations\": [\n            \"game_state\"\n          ]\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"bet_account\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  98,\n                  101,\n                  116,\n                  95,\n                  97,\n                  99,\n                  99,\n                  111,\n                  117,\n                  110,\n                  116\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"user\"\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"game_state.total_games\",\n                \"account\": \"GameState\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"choice\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"withdraw\",\n      \"discriminator\": [\n        183,\n        18,\n        70,\n        156,\n        148,\n        109,\n        161,\n        34\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"owner\",\n          \"writable\": true,\n          \"signer\": true,\n          \"relations\": [\n            \"game_state\"\n          ]\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"BetAccount\",\n      \"discriminator\": [\n        117,\n        187,\n        165,\n        174,\n        194,\n        28,\n        119,\n        76\n      ]\n    },\n    {\n      \"name\": \"GameState\",\n      \"discriminator\": [\n        144,\n        94,\n        208,\n        172,\n        248,\n        99,\n        134,\n        120\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"UnautharisedOwner\",\n      \"msg\": \"Invalid owner\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"InvalidChoice\",\n      \"msg\": \"Choice must be 0 or 1\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidAmount\",\n      \"msg\": \"Amount exceeds the total amount in the vault\"\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"BetAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"user\",\n            \"type\": \"pubkey\"\n          },\n          {\n            \"name\": \"amount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"choice\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"won\",\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"settled\",\n            \"type\": \"bool\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"GameState\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"pubkey\"\n          },\n          {\n            \"name\": \"total_amount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"fee_percentage\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"total_games\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ]\n} as const\n\n// Your program ID from the IDL\nexport const PROGRAM_ID = \"CK9rjq6oyLK8uJBkzkg3CBPW4ydBdKM5khQQUigFuqng\""],"names":[],"mappings":"AAAA,iBAAiB;;;;;AAEV,MAAM,MAAM;IACjB,WAAW;IACX,YAAY;QACV,QAAQ;QACR,WAAW;QACX,QAAQ;QACR,eAAe;IACjB;IACA,gBAAgB;QACd;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;oBACV,aAAa;wBACX;qBACD;gBACH;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;gBACZ;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;gBACZ;gBACA;oBACE,QAAQ;oBACR,aAAa;wBACX;qBACD;gBACH;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;4BACA;gCACE,QAAQ;gCACR,QAAQ;gCACR,WAAW;4BACb;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;gBACA;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;oBACV,aAAa;wBACX;qBACD;gBACH;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;KACD;IACD,YAAY;QACV;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;KACD;IACD,UAAU;QACR;YACE,QAAQ;YACR,QAAQ;YACR,OAAO;QACT;QACA;YACE,QAAQ;YACR,QAAQ;YACR,OAAO;QACT;QACA;YACE,QAAQ;YACR,QAAQ;YACR,OAAO;QACT;KACD;IACD,SAAS;QACP;YACE,QAAQ;YACR,QAAQ;gBACN,QAAQ;gBACR,UAAU;oBACR;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;iBACD;YACH;QACF;QACA;YACE,QAAQ;YACR,QAAQ;gBACN,QAAQ;gBACR,UAAU;oBACR;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;iBACD;YACH;QACF;KACD;AACH;AAGO,MAAM,aAAa","debugId":null}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/coin-flip/coin-flip-data-access.tsx"],"sourcesContent":["// src/components/coin-flip/coin-flip-data-access.tsx\n'use client'\n\nimport { Program, AnchorProvider } from '@coral-xyz/anchor'\nimport { useConnection } from '@solana/wallet-adapter-react'\nimport { Cluster, PublicKey, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js'\nimport { useMutation, useQuery } from '@tanstack/react-query'\nimport { useCallback, useMemo } from 'react'\nimport BN from 'bn.js'\nimport { useCluster } from '../cluster/cluster-data-access'\nimport { useAnchorProvider } from '../solana/solana-provider'\nimport { useTransactionToast } from '../use-transaction-toast'\nimport { toast } from 'sonner'\nimport { SendTransactionError } from '@solana/web3.js'\nimport { IDL, PROGRAM_ID } from '@/lib/idl'\n\n// Define the types based on your IDL\ntype CoinFlipBackend = typeof IDL\n\n// Helper functions\nfunction getCoinFlipProgram(provider: AnchorProvider) {\n  return new Program(IDL as any, provider)\n}\n\nfunction getCoinFlipProgramId(): PublicKey {\n  return new PublicKey(PROGRAM_ID)\n}\n\n// Helper to get transaction logs for errors\nasync function getTransactionLogs(error: any, connection: any) {\n  if (error instanceof SendTransactionError) {\n    try {\n      return await error.getLogs(connection)\n    } catch {\n      return null\n    }\n  }\n  return error.logs || null\n}\n\ninterface InitializeArgs {\n  owner: PublicKey\n  fee_percentage: number\n}\n\ninterface DepositArgs {\n  owner: PublicKey\n  amount: number\n}\n\ninterface WithdrawArgs {\n  owner: PublicKey\n  amount: number\n}\n\nexport function useCoinFlipProgram() {\n  const { connection } = useConnection()\n  const { cluster } = useCluster()\n  const provider = useAnchorProvider()\n  const transactionToast = useTransactionToast()\n\n  const programId = useMemo(() => getCoinFlipProgramId(), [])\n  const program = useMemo(() => getCoinFlipProgram(provider), [provider])\n\n  const accounts = useQuery({\n    queryKey: ['coin_flip', 'all', { cluster }],\n    queryFn: () => (program.account as any).gameState.all(),\n  })\n\n  const getProgramAccount = useQuery({\n    queryKey: ['get-program-account', { cluster }],\n    queryFn: () => connection.getParsedAccountInfo(programId),\n  })\n\n  async function checkAccountBalances(accounts: Record<string, PublicKey>) {\n    const balances: Record<string, number> = {}\n    for (const [name, pubkey] of Object.entries(accounts)) {\n      try {\n        balances[name] = await connection.getBalance(pubkey)\n      } catch {\n        balances[name] = 0\n      }\n    }\n    return balances\n  }\n\n  const initialize = useMutation<string, Error, InitializeArgs>({\n    mutationKey: ['game_state', 'initialize', { cluster }],\n    mutationFn: async ({ owner, fee_percentage }) => {\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        programId\n      )\n      await checkAccountBalances({ owner, gameState })\n\n      try {\n        return await (program.methods as any)\n          .initialize(new BN(fee_percentage))\n          .accounts({\n            owner,\n            gameState,\n            systemProgram: SystemProgram.programId,\n          })\n          .rpc()\n      } catch (error: any) {\n        await getTransactionLogs(error, connection)\n        throw error\n      }\n    },\n    onSuccess: (signature) => {\n      transactionToast(signature)\n      accounts.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to initialize: ${error.message}`)\n    },\n  })\n\n  const deposit_to_gamestate = useMutation<string, Error, DepositArgs>({\n    mutationKey: ['game_state', 'deposit', { cluster }],\n    mutationFn: async ({ owner, amount }) => {\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        programId\n      )\n      await checkAccountBalances({ owner, gameState })\n\n      try {\n        return await (program.methods as any)\n          .deposit(new BN(amount))\n          .accounts({ \n            owner, \n            gameState, \n            systemProgram: SystemProgram.programId \n          })\n          .rpc()\n      } catch (error: any) {\n        await getTransactionLogs(error, connection)\n        throw error\n      }\n    },\n    onSuccess: (signature) => {\n      transactionToast(signature)\n      accounts.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to deposit: ${error.message}`)\n    },\n  })\n\n  const withdraw = useMutation<string, Error, WithdrawArgs>({\n    mutationKey: ['game_state', 'withdraw', { cluster }],\n    mutationFn: async ({ owner, amount }) => {\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        programId\n      )\n      await checkAccountBalances({ owner, gameState })\n\n      try {\n        return await (program.methods as any)\n          .withdraw(new BN(amount))\n          .accounts({ \n            owner, \n            gameState, \n            systemProgram: SystemProgram.programId \n          })\n          .rpc()\n      } catch (error: any) {\n        await getTransactionLogs(error, connection)\n        throw error\n      }\n    },\n    onSuccess: (signature) => {\n      transactionToast(signature)\n      accounts.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to withdraw: ${error.message}`)\n    },\n  })\n\n  return {\n    program,\n    programId,\n    accounts,\n    getProgramAccount,\n    initialize,\n    deposit_to_gamestate,\n    withdraw,\n  }\n}\n\nexport function useCoinFlipProgramAccount({\n  user,\n  owner,\n  gameNumber\n}: {\n  user: PublicKey\n  owner: PublicKey\n  gameNumber?: number\n}) {\n  const { connection } = useConnection()\n  const { cluster } = useCluster()\n  const transactionToast = useTransactionToast()\n  const { program } = useCoinFlipProgram()\n\n  const gameStateQuery = useQuery({\n    queryKey: ['game_state', 'fetch', { cluster, owner: owner.toString() }],\n    queryFn: async () => {\n      if (owner.equals(new PublicKey('11111111111111111111111111111111'))) {\n        throw new Error('Invalid owner')\n      }\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        (program as any).programId\n      )\n      return await (program.account as any).gameState.fetch(gameState)\n    },\n    enabled: !!program && !!owner && !owner.equals(new PublicKey('11111111111111111111111111111111')),\n  })\n\n  // Use the current totalGames count (which will be the game number for the next bet)\n  const currentGameNumber = useMemo(() => \n    gameNumber !== undefined ? gameNumber : (gameStateQuery.data?.totalGames?.toNumber() || 0), \n    [gameNumber, gameStateQuery.data?.totalGames]\n  )\n\n  const [gameState] = useMemo(() => PublicKey.findProgramAddressSync(\n    [Buffer.from('gamestate'), owner.toBuffer()],\n    (program as any).programId\n  ), [owner, program])\n\n  // IMPORTANT: Based on your IDL, the bet_account PDA uses game_state.total_games directly\n  // This means we need to use the current total_games value from the game state\n  const [betAccount] = useMemo(() => {\n    // According to your IDL, the seed is the current total_games value from game_state\n    // This is automatically handled by Anchor, but for manual derivation:\n    const gameNumber = gameStateQuery.data?.totalGames?.toNumber() || 0\n    const gameNumberBuf = new BN(gameNumber).toArrayLike(Buffer, 'le', 8)\n    return PublicKey.findProgramAddressSync(\n      [Buffer.from('bet_account'), user.toBuffer(), gameNumberBuf],\n      (program as any).programId\n    )\n  }, [user, gameStateQuery.data?.totalGames, program])\n\n  async function checkAllBalances() {\n    const accounts = { user, owner, gameState, betAccount }\n    const balances: Record<string, number> = {}\n    for (const [name, pubkey] of Object.entries(accounts)) {\n      try {\n        balances[name] = await connection.getBalance(pubkey)\n      } catch {\n        balances[name] = 0\n      }\n    }\n    return balances\n  }\n\n  const place_bet = useMutation<string, Error, { amount: number; choice: number }>({\n    mutationKey: ['bet_account', 'place_bet', { cluster, betAccount: betAccount.toString() }],\n    mutationFn: async ({ amount, choice }) => {\n      if (![0, 1].includes(choice)) throw new Error('Choice must be 0 or 1')\n      if (user.equals(new PublicKey('11111111111111111111111111111111'))) throw new Error('Invalid user public key')\n      if (owner.equals(new PublicKey('11111111111111111111111111111111'))) throw new Error('Invalid owner public key')\n\n      await checkAllBalances()\n\n      // Fetch fresh game state data right before transaction\n      const gameStateData = await (program.account as any).gameState.fetch(gameState)\n       \n      // Calculate expected winnings\n      const payout = amount * 2\n      const fee = Math.floor((payout * gameStateData.feePercentage.toNumber()) / 100)\n      const userWinnings = payout - fee\n\n      // Check if game state has enough funds\n      if (userWinnings > gameStateData.totalAmount.toNumber()) {\n        throw new Error(`Insufficient funds in game state. Available: ${gameStateData.totalAmount.toString()}, Required: ${userWinnings}`)\n      }\n\n      // Use snake_case method name as per your IDL\n      return await (program.methods as any)\n        .place_bet(new BN(amount), choice)\n        .accounts({\n          user,\n          owner,\n          gameState,\n          // betAccount is automatically derived by Anchor based on the PDA seeds in IDL\n          systemProgram: SystemProgram.programId,\n        })\n        .rpc()\n    },\n    onSuccess: async (signature) => {\n      transactionToast(signature)\n      await gameStateQuery.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to place bet: ${error.message}`)\n    },\n  })\n\n  // Query should handle the case where bet account might not exist\n  const accountQuery = useQuery({\n    queryKey: ['bet_account', 'fetch', { cluster, betAccount: betAccount.toString(), gameNumber: currentGameNumber }],\n    queryFn: async () => {\n      try {\n        return await (program.account as any).betAccount.fetch(betAccount)\n      } catch (error: any) {\n        // Return null if account doesn't exist instead of undefined\n        if (error.message?.includes('Account does not exist')) {\n          return null\n        }\n        throw error\n      }\n    },\n    enabled: !!program && !!betAccount && !!gameStateQuery.data,\n    retry: false, // Don't retry on account not found\n  })\n\n  return {\n    place_bet,\n    currentGameNumber,\n    gameStateData: gameStateQuery.data,\n    gameState,\n    betAccount,\n    accountQuery,\n    checkAllBalances,\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}