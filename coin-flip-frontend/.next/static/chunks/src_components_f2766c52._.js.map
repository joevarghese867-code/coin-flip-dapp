{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/wallet/WalletProvider.tsx"],"sourcesContent":["'use client'\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui'\nimport { clusterApiUrl } from '@solana/web3.js'\nimport { useMemo } from 'react'\n\n// Import wallet adapter CSS\nrequire('@solana/wallet-adapter-react-ui/styles.css')\n\nexport function AppWalletProvider({ children }: { children: React.ReactNode }) {\n  const network = WalletAdapterNetwork.Devnet\n  const endpoint = useMemo(() => clusterApiUrl(network), [network])\n  \n  const wallets = useMemo(\n    () => [new PhantomWalletAdapter()],\n    []\n  )\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          {children}\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  )\n}"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AANA;;;;;;;AAQA,4BAA4B;;AAGrB,SAAS,kBAAkB,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;;IAChC,MAAM,UAAU,+KAAA,CAAA,uBAAoB,CAAC,MAAM;IAC3C,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;+CAAE,IAAM,CAAA,GAAA,2KAAA,CAAA,gBAAa,AAAD,EAAE;8CAAU;QAAC;KAAQ;IAEhE,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;8CACpB,IAAM;gBAAC,IAAI,oLAAA,CAAA,uBAAoB;aAAG;6CAClC,EAAE;IAGJ,qBACE,6LAAC,6LAAA,CAAA,qBAAkB;QAAC,UAAU;kBAC5B,cAAA,6LAAC,yLAAA,CAAA,iBAAc;YAAC,SAAS;YAAS,WAAW;sBAC3C,cAAA,6LAAC,oMAAA,CAAA,sBAAmB;0BACjB;;;;;;;;;;;;;;;;AAKX;GAlBgB;KAAA","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/cluster/cluster-data-access.tsx"],"sourcesContent":["'use client'\nimport { createContext, ReactNode, useContext } from 'react'\n\nconst ClusterContext = createContext<{\n  cluster: { network: string; endpoint: string }\n}>({\n  cluster: { network: 'localnet', endpoint: 'http://localhost:8899' }\n})\n\nexport function ClusterProvider({ children }: { children: ReactNode }) {\n  const cluster = { network: 'localnet', endpoint: 'http://localhost:8899' }\n  \n  return (\n    <ClusterContext.Provider value={{ cluster }}>\n      {children}\n    </ClusterContext.Provider>\n  )\n}\n\nexport function useCluster() {\n  return useContext(ClusterContext)\n}"],"names":[],"mappings":";;;;;AACA;;;AADA;;AAGA,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAEhC;IACD,SAAS;QAAE,SAAS;QAAY,UAAU;IAAwB;AACpE;AAEO,SAAS,gBAAgB,KAAqC;QAArC,EAAE,QAAQ,EAA2B,GAArC;IAC9B,MAAM,UAAU;QAAE,SAAS;QAAY,UAAU;IAAwB;IAEzE,qBACE,6LAAC,eAAe,QAAQ;QAAC,OAAO;YAAE;QAAQ;kBACvC;;;;;;AAGP;KARgB;AAUT,SAAS;;IACd,OAAO,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;AACpB;GAFgB","debugId":null}}]
}