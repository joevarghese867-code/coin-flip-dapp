{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/wallet/WalletButton.tsx"],"sourcesContent":["'use client'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js'\nimport { useState, useEffect } from 'react'\nimport { toast } from 'sonner'\n\nfunction AirdropButton() {\n  const { connection } = useConnection()\n  const { publicKey } = useWallet()\n  const [isAirdropping, setIsAirdropping] = useState(false)\n\n  const handleAirdrop = async () => {\n    if (!publicKey) {\n      toast.error('Please connect your wallet first')\n      return\n    }\n\n    setIsAirdropping(true)\n    try {\n      console.log('Requesting airdrop for:', publicKey.toString())\n      \n      // Check current balance\n      const currentBalance = await connection.getBalance(publicKey)\n      console.log('Current balance:', currentBalance / LAMPORTS_PER_SOL, 'SOL')\n      \n      // Request 2 SOL airdrop\n      const signature = await connection.requestAirdrop(\n        publicKey,\n        2 * LAMPORTS_PER_SOL\n      )\n      \n      // Wait for confirmation\n      await connection.confirmTransaction(signature)\n      \n      // Check new balance\n      const newBalance = await connection.getBalance(publicKey)\n      console.log('New balance:', newBalance / LAMPORTS_PER_SOL, 'SOL')\n      \n      toast.success(`Airdropped 2 SOL! New balance: ${(newBalance / LAMPORTS_PER_SOL).toFixed(2)} SOL`)\n    } catch (error: any) {\n      console.error('Airdrop failed:', error)\n      toast.error(`Airdrop failed: ${error.message}`)\n    } finally {\n      setIsAirdropping(false)\n    }\n  }\n\n  if (!publicKey) {\n    return null\n  }\n\n  return (\n    <button\n      onClick={handleAirdrop}\n      disabled={isAirdropping}\n      className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n    >\n      {isAirdropping ? 'Airdropping...' : 'Airdrop 2 SOL'}\n    </button>\n  )\n}\n\nexport function WalletButton() {\n  const [mounted, setMounted] = useState(false)\n\n  // Ensure component only renders after hydration\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!mounted) {\n    // Return a placeholder that matches the server-rendered HTML\n    return (\n      <div className=\"flex justify-end items-center gap-2 p-4\">\n        <button className=\"px-4 py-2 bg-gray-300 rounded\" disabled>\n          Loading...\n        </button>\n        <button className=\"btn-primary\" disabled>\n          Loading...\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex justify-end items-center gap-2 p-4\">\n      <AirdropButton />\n      <WalletMultiButton className=\"btn-primary\" />\n    </div>\n  )\n}"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AACA;AACA;AACA;;;AALA;;;;;;AAOA,SAAS;;IACP,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,wLAAA,CAAA,gBAAa,AAAD;IACnC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD;IAC9B,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,MAAM,gBAAgB;QACpB,IAAI,CAAC,WAAW;YACd,2IAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ;QACF;QAEA,iBAAiB;QACjB,IAAI;YACF,QAAQ,GAAG,CAAC,2BAA2B,UAAU,QAAQ;YAEzD,wBAAwB;YACxB,MAAM,iBAAiB,MAAM,WAAW,UAAU,CAAC;YACnD,QAAQ,GAAG,CAAC,oBAAoB,iBAAiB,2KAAA,CAAA,mBAAgB,EAAE;YAEnE,wBAAwB;YACxB,MAAM,YAAY,MAAM,WAAW,cAAc,CAC/C,WACA,IAAI,2KAAA,CAAA,mBAAgB;YAGtB,wBAAwB;YACxB,MAAM,WAAW,kBAAkB,CAAC;YAEpC,oBAAoB;YACpB,MAAM,aAAa,MAAM,WAAW,UAAU,CAAC;YAC/C,QAAQ,GAAG,CAAC,gBAAgB,aAAa,2KAAA,CAAA,mBAAgB,EAAE;YAE3D,2IAAA,CAAA,QAAK,CAAC,OAAO,CAAC,AAAC,kCAA4E,OAA3C,CAAC,aAAa,2KAAA,CAAA,mBAAgB,EAAE,OAAO,CAAC,IAAG;QAC7F,EAAE,OAAO,OAAY;YACnB,QAAQ,KAAK,CAAC,mBAAmB;YACjC,2IAAA,CAAA,QAAK,CAAC,KAAK,CAAC,AAAC,mBAAgC,OAAd,MAAM,OAAO;QAC9C,SAAU;YACR,iBAAiB;QACnB;IACF;IAEA,IAAI,CAAC,WAAW;QACd,OAAO;IACT;IAEA,qBACE,6LAAC;QACC,SAAS;QACT,UAAU;QACV,WAAU;kBAET,gBAAgB,mBAAmB;;;;;;AAG1C;GAtDS;;QACgB,wLAAA,CAAA,gBAAa;QACd,oLAAA,CAAA,YAAS;;;KAFxB;AAwDF,SAAS;;IACd,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,gDAAgD;IAChD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,WAAW;QACb;iCAAG,EAAE;IAEL,IAAI,CAAC,SAAS;QACZ,6DAA6D;QAC7D,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAO,WAAU;oBAAgC,QAAQ;8BAAC;;;;;;8BAG3D,6LAAC;oBAAO,WAAU;oBAAc,QAAQ;8BAAC;;;;;;;;;;;;IAK/C;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;;;;;0BACD,6LAAC,kMAAA,CAAA,oBAAiB;gBAAC,WAAU;;;;;;;;;;;;AAGnC;IA5BgB;MAAA","debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/solana/solana-provider.tsx"],"sourcesContent":["'use client'\nimport { AnchorProvider } from '@coral-xyz/anchor'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { useMemo } from 'react'\n\nexport function useAnchorProvider() {\n  const { connection } = useConnection()\n  const wallet = useWallet()\n\n  return useMemo(() => {\n    return new AnchorProvider(connection, wallet as any, {\n      commitment: 'confirmed',\n    })\n  }, [connection, wallet])\n}"],"names":[],"mappings":";;;AACA;AAAA;AACA;AAAA;AACA;;AAHA;;;;AAKO,SAAS;;IACd,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,wLAAA,CAAA,gBAAa,AAAD;IACnC,MAAM,SAAS,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD;IAEvB,OAAO,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;qCAAE;YACb,OAAO,IAAI,uLAAA,CAAA,iBAAc,CAAC,YAAY,QAAe;gBACnD,YAAY;YACd;QACF;oCAAG;QAAC;QAAY;KAAO;AACzB;GATgB;;QACS,wLAAA,CAAA,gBAAa;QACrB,oLAAA,CAAA,YAAS","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/use-transaction-toast.tsx"],"sourcesContent":["'use client'\nimport { toast } from 'sonner'\n\nexport function useTransactionToast() {\n  return (signature: string) => {\n    toast.success('Transaction sent!', {\n      description: `Signature: ${signature.slice(0, 8)}...`,\n      action: {\n        label: 'View',\n        onClick: () => window.open(`https://explorer.solana.com/tx/${signature}?cluster=localnet`, '_blank')\n      }\n    })\n  }\n}"],"names":[],"mappings":";;;AACA;AADA;;AAGO,SAAS;IACd,OAAO,CAAC;QACN,2IAAA,CAAA,QAAK,CAAC,OAAO,CAAC,qBAAqB;YACjC,aAAa,AAAC,cAAmC,OAAtB,UAAU,KAAK,CAAC,GAAG,IAAG;YACjD,QAAQ;gBACN,OAAO;gBACP,SAAS,IAAM,OAAO,IAAI,CAAC,AAAC,kCAA2C,OAAV,WAAU,sBAAoB;YAC7F;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/lib/idl.ts"],"sourcesContent":["// src/lib/idl.ts\n\nexport const IDL = {\n  \"address\": \"CK9rjq6oyLK8uJBkzkg3CBPW4ydBdKM5khQQUigFuqng\",\n  \"metadata\": {\n    \"name\": \"coin_flip_backend\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"deposit\",\n      \"discriminator\": [\n        242,    \n        35,\n        198,\n        137,\n        82,\n        225,\n        242,\n        182\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"owner\",\n          \"writable\": true,\n          \"signer\": true,\n          \"relations\": [\n            \"game_state\"\n          ]\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [\n        175,\n        175,\n        109,\n        31,\n        13,\n        152,\n        155,\n        237\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"owner\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"fee_percentage\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"place_bet\",\n      \"discriminator\": [\n        222,\n        62,\n        67,\n        220,\n        63,\n        166,\n        126,\n        33\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"user\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"owner\",\n          \"relations\": [\n            \"game_state\"\n          ]\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"bet_account\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  98,\n                  101,\n                  116,\n                  95,\n                  97,\n                  99,\n                  99,\n                  111,\n                  117,\n                  110,\n                  116\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"user\"\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"game_state.total_games\",\n                \"account\": \"GameState\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"choice\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"withdraw\",\n      \"discriminator\": [\n        183,\n        18,\n        70,\n        156,\n        148,\n        109,\n        161,\n        34\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"owner\",\n          \"writable\": true,\n          \"signer\": true,\n          \"relations\": [\n            \"game_state\"\n          ]\n        },\n        {\n          \"name\": \"game_state\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"const\",\n                \"value\": [\n                  103,\n                  97,\n                  109,\n                  101,\n                  115,\n                  116,\n                  97,\n                  116,\n                  101\n                ]\n              },\n              {\n                \"kind\": \"account\",\n                \"path\": \"owner\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"BetAccount\",\n      \"discriminator\": [\n        117,\n        187,\n        165,\n        174,\n        194,\n        28,\n        119,\n        76\n      ]\n    },\n    {\n      \"name\": \"GameState\",\n      \"discriminator\": [\n        144,\n        94,\n        208,\n        172,\n        248,\n        99,\n        134,\n        120\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"UnautharisedOwner\",\n      \"msg\": \"Invalid owner\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"InvalidChoice\",\n      \"msg\": \"Choice must be 0 or 1\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidAmount\",\n      \"msg\": \"Amount exceeds the total amount in the vault\"\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"BetAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"user\",\n            \"type\": \"pubkey\"\n          },\n          {\n            \"name\": \"amount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"choice\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"won\",\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"settled\",\n            \"type\": \"bool\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"GameState\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"pubkey\"\n          },\n          {\n            \"name\": \"total_amount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"fee_percentage\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"total_games\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ]\n} as const\n\n// Your program ID from the IDL\nexport const PROGRAM_ID = \"CK9rjq6oyLK8uJBkzkg3CBPW4ydBdKM5khQQUigFuqng\""],"names":[],"mappings":"AAAA,iBAAiB;;;;;AAEV,MAAM,MAAM;IACjB,WAAW;IACX,YAAY;QACV,QAAQ;QACR,WAAW;QACX,QAAQ;QACR,eAAe;IACjB;IACA,gBAAgB;QACd;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;oBACV,aAAa;wBACX;qBACD;gBACH;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;gBACZ;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;gBACZ;gBACA;oBACE,QAAQ;oBACR,aAAa;wBACX;qBACD;gBACH;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;4BACA;gCACE,QAAQ;gCACR,QAAQ;gCACR,WAAW;4BACb;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;gBACA;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,YAAY;gBACV;oBACE,QAAQ;oBACR,YAAY;oBACZ,UAAU;oBACV,aAAa;wBACX;qBACD;gBACH;gBACA;oBACE,QAAQ;oBACR,YAAY;oBACZ,OAAO;wBACL,SAAS;4BACP;gCACE,QAAQ;gCACR,SAAS;oCACP;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;iCACD;4BACH;4BACA;gCACE,QAAQ;gCACR,QAAQ;4BACV;yBACD;oBACH;gBACF;gBACA;oBACE,QAAQ;oBACR,WAAW;gBACb;aACD;YACD,QAAQ;gBACN;oBACE,QAAQ;oBACR,QAAQ;gBACV;aACD;QACH;KACD;IACD,YAAY;QACV;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,QAAQ;YACR,iBAAiB;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;KACD;IACD,UAAU;QACR;YACE,QAAQ;YACR,QAAQ;YACR,OAAO;QACT;QACA;YACE,QAAQ;YACR,QAAQ;YACR,OAAO;QACT;QACA;YACE,QAAQ;YACR,QAAQ;YACR,OAAO;QACT;KACD;IACD,SAAS;QACP;YACE,QAAQ;YACR,QAAQ;gBACN,QAAQ;gBACR,UAAU;oBACR;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;iBACD;YACH;QACF;QACA;YACE,QAAQ;YACR,QAAQ;gBACN,QAAQ;gBACR,UAAU;oBACR;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;oBACA;wBACE,QAAQ;wBACR,QAAQ;oBACV;iBACD;YACH;QACF;KACD;AACH;AAGO,MAAM,aAAa","debugId":null}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/coin-flip/coin-flip-data-access.tsx"],"sourcesContent":["// src/components/coin-flip/coin-flip-data-access.tsx\n'use client'\n\nimport { Program, AnchorProvider } from '@coral-xyz/anchor'\nimport { useConnection } from '@solana/wallet-adapter-react'\nimport { Cluster, PublicKey, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js'\nimport { useMutation, useQuery } from '@tanstack/react-query'\nimport { useCallback, useMemo } from 'react'\nimport BN from 'bn.js'\nimport { useCluster } from '../cluster/cluster-data-access'\nimport { useAnchorProvider } from '../solana/solana-provider'\nimport { useTransactionToast } from '../use-transaction-toast'\nimport { toast } from 'sonner'\nimport { SendTransactionError } from '@solana/web3.js'\nimport { IDL, PROGRAM_ID } from '@/lib/idl'\nimport { Idl } from '@coral-xyz/anchor'\n\n// Define the types based on your IDL\ntype CoinFlipBackend = typeof IDL\n\n// Helper functions\nfunction getCoinFlipProgram(provider: AnchorProvider) {\n    \n  const programId = getCoinFlipProgramId();\n  return new Program(IDL, provider);\n}\n\n\nfunction getCoinFlipProgramId(): PublicKey {\n  return new PublicKey(PROGRAM_ID)\n}\n\n// Helper to get transaction logs for errors\nasync function getTransactionLogs(error: any, connection: any) {\n  if (error instanceof SendTransactionError) {\n    try {\n      return await error.getLogs(connection)\n    } catch {\n      return null\n    }\n  }\n  return error.logs || null\n}\n\ninterface InitializeArgs {\n  owner: PublicKey\n  fee_percentage: number\n}\n\ninterface DepositArgs {\n  owner: PublicKey\n  amount: number\n}\n\ninterface WithdrawArgs {\n  owner: PublicKey\n  amount: number\n}\n\nexport function useCoinFlipProgram() {\n  const { connection } = useConnection()\n  const { cluster } = useCluster()\n  const provider = useAnchorProvider()\n  const transactionToast = useTransactionToast()\n\n  const programId = useMemo(() => getCoinFlipProgramId(), [])\n  const program = useMemo(() => getCoinFlipProgram(provider), [provider])\n\n  const accounts = useQuery({\n    queryKey: ['coin_flip', 'all', { cluster }],\n    queryFn: () => (program.account as any).gameState.all(),\n  })\n\n  const getProgramAccount = useQuery({\n    queryKey: ['get-program-account', { cluster }],\n    queryFn: () => connection.getParsedAccountInfo(programId),\n  })\n\n  async function checkAccountBalances(accounts: Record<string, PublicKey>) {\n    const balances: Record<string, number> = {}\n    for (const [name, pubkey] of Object.entries(accounts)) {\n      try {\n        balances[name] = await connection.getBalance(pubkey)\n      } catch {\n        balances[name] = 0\n      }\n    }\n    return balances\n  }\n\n  const initialize = useMutation<string, Error, InitializeArgs>({\n    mutationKey: ['game_state', 'initialize', { cluster }],\n    mutationFn: async ({ owner, fee_percentage }) => {\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        programId\n      )\n      await checkAccountBalances({ owner, gameState })\n\n      try {\n        return await (program.methods as any)\n          .initialize(new BN(fee_percentage))\n          .accounts({\n            owner,\n            gameState,\n            systemProgram: SystemProgram.programId,\n          })\n          .rpc()\n      } catch (error: any) {\n        await getTransactionLogs(error, connection)\n        throw error\n      }\n    },\n    onSuccess: (signature) => {\n      transactionToast(signature)\n      accounts.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to initialize: ${error.message}`)\n    },\n  })\n\n  const deposit_to_gamestate = useMutation<string, Error, DepositArgs>({\n    mutationKey: ['game_state', 'deposit', { cluster }],\n    mutationFn: async ({ owner, amount }) => {\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        programId\n      )\n      await checkAccountBalances({ owner, gameState })\n\n      try {\n        return await (program.methods as any)\n          .deposit(new BN(amount))\n          .accounts({ \n            owner, \n            gameState, \n            systemProgram: SystemProgram.programId \n          })\n          .rpc()\n      } catch (error: any) {\n        await getTransactionLogs(error, connection)\n        throw error\n      }\n    },\n    onSuccess: (signature) => {\n      transactionToast(signature)\n      accounts.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to deposit: ${error.message}`)\n    },\n  })\n\n  const withdraw = useMutation<string, Error, WithdrawArgs>({\n    mutationKey: ['game_state', 'withdraw', { cluster }],\n    mutationFn: async ({ owner, amount }) => {\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        programId\n      )\n      await checkAccountBalances({ owner, gameState })\n\n      try {\n        return await (program.methods as any)\n          .withdraw(new BN(amount))\n          .accounts({ \n            owner, \n            gameState, \n            systemProgram: SystemProgram.programId \n          })\n          .rpc()\n      } catch (error: any) {\n        await getTransactionLogs(error, connection)\n        throw error\n      }\n    },\n    onSuccess: (signature) => {\n      transactionToast(signature)\n      accounts.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to withdraw: ${error.message}`)\n    },\n  })\n\n  return {\n    program,\n    programId,\n    accounts,\n    getProgramAccount,\n    initialize,\n    deposit_to_gamestate,\n    withdraw,\n  }\n}\n\nexport function useCoinFlipProgramAccount({\n  user,\n  owner,\n  gameNumber\n}: {\n  user: PublicKey\n  owner: PublicKey\n  gameNumber?: number\n}) {\n  const { connection } = useConnection()\n  const { cluster } = useCluster()\n  const transactionToast = useTransactionToast()\n  const { program } = useCoinFlipProgram()\n\n  const gameStateQuery = useQuery({\n    queryKey: ['game_state', 'fetch', { cluster, owner: owner.toString() }],\n    queryFn: async () => {\n      if (owner.equals(new PublicKey('11111111111111111111111111111111'))) {\n        throw new Error('Invalid owner')\n      }\n      const [gameState] = PublicKey.findProgramAddressSync(\n        [Buffer.from('gamestate'), owner.toBuffer()],\n        (program as any).programId\n      )\n      return await (program.account as any).gameState.fetch(gameState)\n    },\n    enabled: !!program && !!owner && !owner.equals(new PublicKey('11111111111111111111111111111111')),\n  })\n\n  // Use the current totalGames count (which will be the game number for the next bet)\n  const currentGameNumber = useMemo(() => \n    gameNumber !== undefined ? gameNumber : (gameStateQuery.data?.totalGames?.toNumber() || 0), \n    [gameNumber, gameStateQuery.data?.totalGames]\n  )\n\n  const [gameState] = useMemo(() => PublicKey.findProgramAddressSync(\n    [Buffer.from('gamestate'), owner.toBuffer()],\n    (program as any).programId\n  ), [owner, program])\n\n  // IMPORTANT: Based on your IDL, the bet_account PDA uses game_state.total_games directly\n  // This means we need to use the current total_games value from the game state\n  const [betAccount] = useMemo(() => {\n    // According to your IDL, the seed is the current total_games value from game_state\n    // This is automatically handled by Anchor, but for manual derivation:\n    const gameNumber = gameStateQuery.data?.totalGames?.toNumber() || 0\n    const gameNumberBuf = new BN(gameNumber).toArrayLike(Buffer, 'le', 8)\n    return PublicKey.findProgramAddressSync(\n      [Buffer.from('bet_account'), user.toBuffer(), gameNumberBuf],\n      (program as any).programId\n    )\n  }, [user, gameStateQuery.data?.totalGames, program])\n\n  async function checkAllBalances() {\n    const accounts = { user, owner, gameState, betAccount }\n    const balances: Record<string, number> = {}\n    for (const [name, pubkey] of Object.entries(accounts)) {\n      try {\n        balances[name] = await connection.getBalance(pubkey)\n      } catch {\n        balances[name] = 0\n      }\n    }\n    return balances\n  }\n\n  const placeBet = useMutation<string, Error, { amount: number; choice: number }>({\n    mutationKey: ['bet_account', 'place_bet', { cluster, betAccount: betAccount.toString() }],\n    mutationFn: async ({ amount, choice }) => {\n      if (![0, 1].includes(choice)) throw new Error('Choice must be 0 or 1')\n      if (user.equals(new PublicKey('11111111111111111111111111111111'))) throw new Error('Invalid user public key')\n      if (owner.equals(new PublicKey('11111111111111111111111111111111'))) throw new Error('Invalid owner public key')\n\n      await checkAllBalances()\n\n      // Fetch fresh game state data right before transaction\n      const gameStateData = await (program.account as any).gameState.fetch(gameState)\n       \n      // Calculate expected winnings\n      const payout = amount * 2\n      const fee = Math.floor((payout * gameStateData.feePercentage.toNumber()) / 100)\n      const userWinnings = payout - fee\n\n      // Check if game state has enough funds\n      if (userWinnings > gameStateData.totalAmount.toNumber()) {\n        throw new Error(`Insufficient funds in game state. Available: ${gameStateData.totalAmount.toString()}, Required: ${userWinnings}`)\n      }\n\n      // Use snake_case method name as per your IDL\n      return await (program.methods as any)\n        .placeBet(new BN(amount), choice)\n        .accounts({\n          user,\n          owner,\n          gameState,\n          // betAccount is automatically derived by Anchor based on the PDA seeds in IDL\n          systemProgram: SystemProgram.programId,\n        })\n        .rpc()\n    },\n    onSuccess: async (signature) => {\n      transactionToast(signature)\n      await gameStateQuery.refetch()\n    },\n    onError: async (error) => {\n      await getTransactionLogs(error, connection)\n      toast.error(`Failed to place bet: ${error.message}`)\n    },\n  })\n\n  // Query should handle the case where bet account might not exist\n  const accountQuery = useQuery({\n    queryKey: ['bet_account', 'fetch', { cluster, betAccount: betAccount.toString(), gameNumber: currentGameNumber }],\n    queryFn: async () => {\n      try {\n        return await (program.account as any).betAccount.fetch(betAccount)\n      } catch (error: any) {\n        // Return null if account doesn't exist instead of undefined\n        if (error.message?.includes('Account does not exist')) {\n          return null\n        }\n        throw error\n      }\n    },\n    enabled: !!program && !!betAccount && !!gameStateQuery.data,\n    retry: false, // Don't retry on account not found\n  })\n\n  return {\n    placeBet,\n    currentGameNumber,\n    gameStateData: gameStateQuery.data,\n    gameState,\n    betAccount,\n    accountQuery,\n    checkAllBalances,\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1075, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/lib/utils.ts"],"sourcesContent":["import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: (string | undefined)[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function ellipsify(str = '', len = 4) {\n  if (str.length > 30) {\n    return str.substring(0, len) + '..' + str.substring(str.length - len, str.length)\n  }\n  return str\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS;IAAG,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,SAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,OAAH,QAAA,SAAA,CAAA,KAAiC;;IAClD,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS;QAAU,MAAA,iEAAM,IAAI,MAAA,iEAAM;IACxC,IAAI,IAAI,MAAM,GAAG,IAAI;QACnB,OAAO,IAAI,SAAS,CAAC,GAAG,OAAO,OAAO,IAAI,SAAS,CAAC,IAAI,MAAM,GAAG,KAAK,IAAI,MAAM;IAClF;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1105, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,KASb;QATa,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF,GATa;IAUd,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 1169, "column": 0}, "map": {"version":3,"sources":["file:///home/joe/bootcamp-temp/coin-flip-frontend/src/components/coin-flip/coin-flip-ui.tsx"],"sourcesContent":["'use client'\n\nimport { PublicKey } from '@solana/web3.js'\nimport { useMemo, useState, useEffect } from 'react'\nimport { useCoinFlipProgram, useCoinFlipProgramAccount } from './coin-flip-data-access'\nimport { Button } from '@/components/ui/button'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { Coins, Trophy, Target } from 'lucide-react'\nimport BN from 'bn.js'\n\nconst LAMPORTS_PER_SOL = 1_000_000_000\n\nfunction GameSelector() {\n  const { accounts } = useCoinFlipProgram()\n  const [selectedGame, setSelectedGame] = useState<PublicKey | null>(null)\n\n  const availableGames = useMemo(() => {\n    return accounts.data?.filter((account: any) => \n      account.account.totalAmount.toNumber() > 0\n    ) || []\n  }, [accounts.data])\n\n  useEffect(() => {\n    if (availableGames.length > 0 && !selectedGame) {\n      setSelectedGame(availableGames[0].publicKey)\n    }\n  }, [availableGames, selectedGame])\n\n  if (availableGames.length === 0) {\n    return (\n      <div className=\"text-center py-12 bg-gray-50 rounded-xl\">\n        <Coins className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold text-gray-700 mb-2\">No Games Available</h3>\n        <p className=\"text-gray-500\">No active games found. Contact an admin to start a game.</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {availableGames.length > 1 && (\n        <div className=\"bg-white rounded-xl p-6 shadow-sm border\">\n          <h3 className=\"text-lg font-semibold mb-4\">Select a Game</h3>\n          <div className=\"grid gap-3\">\n            {availableGames.map((game: any) => (\n              <button\n                key={game.publicKey.toString()}\n                onClick={() => setSelectedGame(game.publicKey)}\n                className={`p-4 rounded-lg border-2 transition-all text-left ${\n                  selectedGame?.equals(game.publicKey)\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <p className=\"font-medium\">Game #{game.account.totalGames.toString()}</p>\n                    <p className=\"text-sm text-gray-600\">\n                      Vault: {(game.account.totalAmount.toNumber() / LAMPORTS_PER_SOL).toFixed(4)} SOL\n                    </p>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    Fee: {game.account.feePercentage.toString()}%\n                  </div>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {selectedGame && (\n        <BettingInterface gameStatePubkey={selectedGame} />\n      )}\n    </div>\n  )\n}\n\nfunction BettingInterface({ gameStatePubkey }: { gameStatePubkey: PublicKey }) {\n  const wallet = useWallet()\n  const { accounts, program } = useCoinFlipProgram()\n  \n  const [betChoice, setBetChoice] = useState<number>(0)\n  const [placeBetAmount, setPlaceBetAmount] = useState<number>(0)\n  const [betResult, setBetResult] = useState<null | 'won' | 'lost' | 'pending'>(null)\n\n  const gameStateData = useMemo(() => {\n    return accounts.data?.find((account: any) => account.publicKey.equals(gameStatePubkey))\n  }, [accounts.data, gameStatePubkey])\n\n  const betAccountQuery = useCoinFlipProgramAccount({\n    user: wallet.publicKey || new PublicKey('11111111111111111111111111111111'),\n    owner: gameStateData?.account?.owner || new PublicKey('11111111111111111111111111111111'),\n    gameNumber: gameStateData?.account?.totalGames?.toNumber()\n  })\n\n  const potentialWinnings = useMemo(() => {\n    if (!placeBetAmount || !gameStateData?.account) return 0\n    const payout = placeBetAmount * 2\n    const fee = (payout * gameStateData.account.feePercentage.toNumber()) / 100\n    return payout - fee\n  }, [placeBetAmount, gameStateData?.account])\n\n  const existingBetInfo = useMemo(() => {\n    const betData = betAccountQuery.accountQuery.data\n    if (!betData?.settled) return null\n    \n    return {\n      amount: betData.amount.toNumber() / LAMPORTS_PER_SOL,\n      choice: betData.choice === 0 ? 'Heads' : 'Tails',\n      won: betData.won\n    }\n  }, [betAccountQuery.accountQuery.data])\n\n  useEffect(() => {\n    if (betAccountQuery.placeBet.isPending) {\n      setBetResult('pending')\n    }\n  }, [betAccountQuery.placeBet.isPending])\n\n  const checkBetResult = async (gameNumber: number) => {\n    if (!wallet.publicKey) return\n\n    const gameNumberBuf = new BN(gameNumber).toArrayLike(Buffer, 'le', 8)\n    const [correctBetAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from('bet_account'), wallet.publicKey.toBuffer(), gameNumberBuf],\n      (program as any).programId\n    )\n\n    let attempts = 0\n    const maxAttempts = 10\n\n    const attemptFetch = async () => {\n      attempts++\n      \n      try {\n        const betData = await (program.account as any).betAccount.fetch(correctBetAccount)\n        \n        if (betData?.settled) {\n          setBetResult(betData.won ? 'won' : 'lost')\n          setPlaceBetAmount(0)\n          accounts.refetch()\n          return\n        }\n        \n        if (attempts < maxAttempts) {\n          setTimeout(attemptFetch, 2000)\n        } else {\n          setBetResult(null)\n          setPlaceBetAmount(0)\n        }\n      } catch (error) {\n        if (attempts < maxAttempts) {\n          setTimeout(attemptFetch, 2000)\n        } else {\n          setBetResult(null)\n          setPlaceBetAmount(0)\n        }\n      }\n    }\n\n    setTimeout(attemptFetch, 3000)\n  }\n\n  const handlePlaceBet = async () => {\n    if (!wallet.publicKey || !gameStateData?.account?.owner || !placeBetAmount || placeBetAmount <= 0) {\n      return\n    }\n\n    setBetResult('pending')\n    const amountLamports = placeBetAmount * LAMPORTS_PER_SOL\n\n    try {\n      const gameNumberForBet = betAccountQuery.currentGameNumber\n      \n      await betAccountQuery.placeBet.mutateAsync({\n        amount: amountLamports,\n        choice: betChoice\n      })\n      \n      checkBetResult(gameNumberForBet)\n    } catch (error) {\n      console.error(\"Bet failed:\", error)\n      setBetResult(null)\n    }\n  }\n\n  if (!gameStateData?.account) {\n    return <div className=\"text-center py-8\">Loading game...</div>\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Game Info Header */}\n      <div className=\"text-center bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-8\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">🪙 Coin Flip Game</h1>\n        <p className=\"text-gray-600 mb-6\">Double your SOL or lose it all!</p>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 max-w-md mx-auto\">\n          <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {gameStateData.account.totalGames.toString()}\n            </div>\n            <div className=\"text-sm text-gray-600\">Games Played</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {(gameStateData.account.totalAmount.toNumber() / LAMPORTS_PER_SOL).toFixed(2)}\n            </div>\n            <div className=\"text-sm text-gray-600\">SOL in Vault</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {gameStateData.account.feePercentage.toString()}%\n            </div>\n            <div className=\"text-sm text-gray-600\">House Fee</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Previous Bet Result */}\n      {existingBetInfo && (\n        <div className={`text-center p-6 rounded-xl ${\n          existingBetInfo.won \n            ? 'bg-green-50 border-2 border-green-200' \n            : 'bg-red-50 border-2 border-red-200'\n        }`}>\n          <div className=\"text-4xl mb-2\">\n            {existingBetInfo.won ? '🎉' : '😢'}\n          </div>\n          <h3 className=\"text-xl font-bold mb-2\">\n            {existingBetInfo.won ? 'You Won!' : 'You Lost!'}\n          </h3>\n          <p className=\"text-gray-700\">\n            You bet {existingBetInfo.amount.toFixed(4)} SOL on {existingBetInfo.choice}\n          </p>\n        </div>\n      )}\n\n      {/* Betting Interface */}\n      <div className=\"max-w-md mx-auto space-y-6\">\n        {/* Bet Amount */}\n        <div className=\"bg-white rounded-xl p-6 shadow-sm border\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Bet Amount\n          </label>\n          <div className=\"flex items-center gap-3\">\n            <input\n              type=\"number\"\n              min={0}\n              step={0.1}\n              placeholder=\"0.0\"\n              value={placeBetAmount || ''}\n              onChange={(e) => setPlaceBetAmount(Number(e.target.value))}\n              disabled={betAccountQuery.placeBet.isPending}\n              className=\"flex-1 px-4 py-3 border rounded-lg text-lg font-semibold text-center\"\n            />\n            <span className=\"text-lg font-medium text-gray-600\">SOL</span>\n          </div>\n          \n          {/* Quick Amount Buttons */}\n          <div className=\"flex gap-2 mt-3\">\n            {[0.1, 0.5, 1.0].map(amount => (\n              <button\n                key={amount}\n                onClick={() => setPlaceBetAmount(amount)}\n                disabled={betAccountQuery.placeBet.isPending}\n                className=\"flex-1 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\"\n              >\n                {amount} SOL\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Potential Winnings */}\n        {placeBetAmount > 0 && (\n          <div className=\"bg-yellow-50 border-2 border-yellow-200 rounded-xl p-4 text-center\">\n            <p className=\"text-lg font-semibold text-yellow-800\">\n              Potential Winnings: {potentialWinnings.toFixed(4)} SOL\n            </p>\n            <p className=\"text-sm text-yellow-700\">\n              2x your bet minus {gameStateData.account.feePercentage.toString()}% house fee\n            </p>\n          </div>\n        )}\n\n        {/* Choice Selection */}\n        <div className=\"space-y-3\">\n          <label className=\"block text-sm font-medium text-gray-700 text-center\">\n            Choose Your Side\n          </label>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <button\n              onClick={() => setBetChoice(0)}\n              disabled={betAccountQuery.placeBet.isPending}\n              className={`p-6 rounded-xl border-2 transition-all ${\n                betChoice === 0\n                  ? 'border-orange-500 bg-orange-50 text-orange-700'\n                  : 'border-gray-200 hover:border-gray-300 text-gray-700'\n              }`}\n            >\n              <div className=\"text-4xl mb-2\">🪙</div>\n              <div className=\"font-semibold\">Heads</div>\n            </button>\n            \n            <button\n              onClick={() => setBetChoice(1)}\n              disabled={betAccountQuery.placeBet.isPending}\n              className={`p-6 rounded-xl border-2 transition-all ${\n                betChoice === 1\n                  ? 'border-blue-500 bg-blue-50 text-blue-700'\n                  : 'border-gray-200 hover:border-gray-300 text-gray-700'\n              }`}\n            >\n              <div className=\"text-4xl mb-2\">🎯</div>\n              <div className=\"font-semibold\">Tails</div>\n            </button>\n          </div>\n        </div>\n\n        {/* Place Bet Button */}\n        <Button\n          onClick={handlePlaceBet}\n          disabled={betAccountQuery.placeBet.isPending || !placeBetAmount || placeBetAmount <= 0 || !wallet.publicKey}\n          className=\"w-full py-4 text-lg font-bold bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600\"\n        >\n          {betAccountQuery.placeBet.isPending ? (\n            <span className=\"flex items-center gap-2\">\n              <div className=\"animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full\"></div>\n              Flipping Coin...\n            </span>\n          ) : (\n            '🎲 Flip the Coin!'\n          )}\n        </Button>\n\n        {/* Bet Status */}\n        {betResult === 'won' && (\n          <div className=\"text-center p-4 bg-green-50 rounded-xl border-2 border-green-200\">\n            <div className=\"text-3xl mb-2\">🎉</div>\n            <p className=\"text-green-600 font-bold text-lg\">You Won!</p>\n          </div>\n        )}\n        {betResult === 'lost' && (\n          <div className=\"text-center p-4 bg-red-50 rounded-xl border-2 border-red-200\">\n            <div className=\"text-3xl mb-2\">😢</div>\n            <p className=\"text-red-600 font-bold text-lg\">You Lost!</p>\n          </div>\n        )}\n        {betResult === 'pending' && (\n          <div className=\"text-center p-4 bg-blue-50 rounded-xl border-2 border-blue-200\">\n            <div className=\"text-3xl mb-2\">⏳</div>\n            <p className=\"text-blue-600 font-semibold\">Processing your bet...</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default function CoinFlipGame() {\n  const wallet = useWallet()\n\n  if (!wallet.publicKey) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Coins className=\"h-20 w-20 text-gray-400 mx-auto mb-6\" />\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Coin Flip Game</h1>\n          <p className=\"text-gray-600 mb-6\">Connect your wallet to start playing!</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n  <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <GameSelector />\n      </div>\n    </div>\n  )\n}"],"names":[],"mappings":"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","debugId":null}}]
}